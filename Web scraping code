import pandas as pd
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import re

# List of column names for the DataFrame
columns = ["Title", "Artists", "GraphClass", "FirstSongLink"]

# Dictionary to store DataFrames for each year
all_songs_data = {}

# Dictionary to store the count of artists
artist_count = {}

# Loop through the years from 2020 to 2010
for year in range(2020, 2009, -1):
    url = f'https://www.billboard.com/charts/year-end/{year}/hot-100-songs/'

    # Make a request to the URL and get the HTML content
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Find all rows in the list
    rows = soup.find_all('li', class_='o-chart-results-list__item')

    # Loop through each row and extract the title and artists
    songs_data = []
    for i, row in enumerate(rows, start=1):  # Start index from 1
        # Extracting the song title
        title_element = row.find('h3', class_='c-title a-font-primary-bold-s u-letter-spacing-0021 lrv-u-font-size-18@tablet lrv-u-font-size-16 u-line-height-125 u-line-height-normal@mobile-max')
        title = title_element.get_text(strip=True) if title_element else "N/A"

        # Extracting the main artist
        main_artist_element = row.find('span', class_='c-label a-font-primary-s lrv-u-font-size-14@mobile-max u-line-height-normal@mobile-max u-letter-spacing-0021 lrv-u-display-block')
        main_artist = main_artist_element.get_text(strip=True) if main_artist_element else "N/A"

        # Extracting the featured artist(s)
        featured_artists_element = row.find('span', class_='c-subheadline a-font-secondary-s u-line-height-125 lrv-u-font-size-14@tablet lrv-u-font-size-12 u-line-height-normal@mobile-max u-letter-spacing-0021 lrv-u-display-block')
        featured_artists = featured_artists_element.get_text(strip=True) if featured_artists_element else ""

        # Combine main artist and featured artist(s)
        all_artists = f"{main_artist}, {featured_artists}" if featured_artists else main_artist

        # Extracting the graph class
        graph_class_element = row.find('h3', class_='c-title a-font-primary-bold-s u-letter-spacing-0021 u-font-size-23@tablet lrv-u-font-size-16 u-line-height-125 u-line-height-normal@mobile-max u-letter-spacing-0028@tablet')
        graph_class = graph_class_element.get_text(strip=True) if graph_class_element else "N/A"

        # Extracting the link to the first song on Billboard Top 100
        first_song_link_element = row.find('a', class_='c-button a-button--transparent')
        first_song_link = first_song_link_element.get('href') if first_song_link_element else ""

        # Use regex to exclude rows with 'N/A' artists
        if not pd.notna(re.match(r'^N/A$', all_artists)):
            # Store the data for the current song in a list
            song_data = [title, all_artists, graph_class, first_song_link]
            songs_data.append(song_data)

            # Update the artist count
            for artist in all_artists.split(', '):
                artist_count[artist] = artist_count.get(artist, 0) + 1

            # If it's the first song, add it to the graph and tables
            if i == 1:
                # Add the first song data to the graph and tables
                plt.bar([f"{year} - {title}"], [1], color='red')
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout()

                print(f"\nYear {year} - Title: {title}, Artist: {all_artists}")

    # Create a pandas DataFrame from the data list and column names
    df = pd.DataFrame(songs_data, columns=columns)

    # Set the index starting from 1
    df.index = range(1, len(df) + 1)

    # Store the DataFrame for the current year in the dictionary
    all_songs_data[year] = df

# Sort the artists by count in descending order
sorted_artists = sorted(artist_count.items(), key=lambda x: x[1], reverse=True)

# Extract the top 10 artists
top_10_artists = [artist for artist, count in sorted_artists[:10]]

# Create a bar plot for the top 10 artists
plt.figure(figsize=(10, 6))
plt.bar(top_10_artists, [artist_count[artist] for artist in top_10_artists], color='blue')
plt.xlabel('Artist')
plt.ylabel('Number of Appearances')
plt.title('Top 10 Artists in Billboard Hot 100 (2010-2020), Excluding Featured Songs')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

# Create a DataFrame to store the count of appearances for each artist over the years
artists_over_years = pd.DataFrame(index=range(2010, 2021), columns=top_10_artists)

# Loop through the years from 2020 to 2010
for year in range(2020, 2009, -1):
    if year in all_songs_data:
        for artist in top_10_artists:
            # Count the number of appearances for each artist in the current year
            appearances_count = all_songs_data[year]['Artists'].str.contains(artist).sum()
            artists_over_years.loc[year, artist] = appearances_count

# Extract the top 5 artists for the line graph
top_5_artists_line_graph = [artist for artist, count in sorted_artists[:5]]

# Create a line graph for the top 5 artists over the years
plt.figure(figsize=(12, 8))

for artist in top_5_artists_line_graph:
    plt.plot(artists_over_years.index, artists_over_years[artist], label=artist)

plt.xlabel('Year')
plt.ylabel('Number of Appearances')
plt.title("Evolution of Artist Appearances on the Billboard Top 100 Over the Years (Excluding Featured Songs)")

plt.legend()
plt.grid(True)
plt.show()

# Print the top 10 artists and their count
print("\nTop 10 Artists (Billboard Top 100, Excluding Featured Songs, 2010-2020):")

for artist, count in sorted_artists[:10]:
    print(f"{artist}: {count} times")

# Function to scrape the title and artist for a given year
def scrape_data(year):
    url = f"https://www.billboard.com/charts/year-end/{year}/hot-100-songs/"
    response = requests.get(url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.content, "html.parser")
        title_element = soup.find("h3", {"id": "title-of-a-story", "class": "c-title"})
        artist_element = soup.find("span", {"class": "c-label a-font-primary-s lrv-u-font-size-14@mobile-max u-line-height-normal@mobile-max u-letter-spacing-0021 lrv-u-display-block u-font-size-20@tablet"})

        title = title_element.get_text(strip=True) if title_element else "Title not found"
        artist = artist_element.get_text(strip=True) if artist_element else "Artist not found"

        return {"Year": year, "Title": title, "Artist": artist}

    else:
        print(f"Failed to retrieve data for {year}. Status code:", response.status_code)
        return {"Year": year, "Title": "Data not found", "Artist": "Data not found"}

# Loop through the years from 2020 to 2009
for year in range(2020, 2009, -1):
    data = scrape_data(year)
    print(f"{data['Year']} - Title: {data['Title']}, Artist: {data['Artist']}")

